{
  "hash": "153b8b01e6ed40b2fa3d968e476d9d67",
  "result": {
    "engine": "jupyter",
    "markdown": "# Best Practices und häufige Fehler in der wissenschaftlichen Visualisierung\n\nEine gute wissenschaftliche Visualisierung ist klar, informativ und vermeidet irreführende Darstellungen. In diesem Kapitel betrachten wir bewährte Praktiken sowie typische Fehler, die bei der Nutzung von Matplotlib auftreten können.\n\n## 1. Best Practices für wissenschaftliche Plots\n### ✅ Klare Achsenbeschriftungen und Titel verwenden\nEin Diagramm sollte immer gut beschriftet sein, um Missverständnisse zu vermeiden.\n\n::: {#5d2651ab .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 10, 100)\ny = np.sin(t)\n\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Zeit (s)', fontsize=12)\nplt.ylabel('Amplitude', fontsize=12)\nplt.title('Gut beschriftetes Diagramm', fontsize=14)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-2-output-1.png){}\n:::\n:::\n\n\n### ✅ Konsistente Farbgebung und Kontraste\nFarbwahl sollte sinnvoll sein und auf gute Lesbarkeit achten.\n\n::: {#c9cb2492 .cell execution_count=2}\n``` {.python .cell-code}\nplt.plot(t, np.sin(t), color='darkblue', linestyle='-', label='sin(t)')\nplt.plot(t, np.cos(t), color='darkred', linestyle='--', label='cos(t)')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.title('Konsistente Farbgestaltung')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-3-output-1.png){}\n:::\n:::\n\n\n### ✅ Richtige Skalierung und Gitterlinien nutzen\nEine gute Skalierung verbessert die Lesbarkeit von Diagrammen.\n\n::: {#b435439d .cell execution_count=3}\n``` {.python .cell-code}\nplt.plot(t, y, label='sin(t)', color='b')\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.xlim(0, 10)\nplt.ylim(-1.2, 1.2)\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.title('Gitterlinien und Achsenskalierung')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n## 2. Häufige Fehler in wissenschaftlichen Plots\n### ❌ Irreführende Achsenskalierung\nWenn eine y-Achse nicht bei Null beginnt, kann dies die Daten verzerren.\n\n::: {#102036b8 .cell execution_count=4}\n``` {.python .cell-code}\nx = np.linspace(0, 10, 100)\ny = x**2\n\nplt.plot(x, y, color='r')\nplt.xlabel('X-Wert')\nplt.ylabel('Quadratwert')\nplt.title('❌ Falsche Skalierung (y beginnt nicht bei 0)')\nplt.ylim(50, 120)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/mfehr/Documents/BCD/w-python-plotting/.venv/lib/python3.12/site-packages/IPython/core/pylabtools.py:170: UserWarning: Glyph 10060 (\\N{CROSS MARK}) missing from font(s) DejaVu Sans.\n  fig.canvas.print_figure(bytes_io, **kw)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-5-output-2.png){}\n:::\n:::\n\n\n### ❌ Überladene Diagramme\nZu viele Linien oder Datenpunkte können ein Diagramm unübersichtlich machen.\n\n::: {#feb9cc38 .cell execution_count=5}\n``` {.python .cell-code}\nfor i in range(10):\n    plt.plot(t, np.sin(t + i * 0.1), alpha=0.5)\nplt.xlabel('Zeit (s)')\nplt.ylabel('Amplitude')\nplt.title('❌ Überladenes Diagramm mit zu vielen Linien')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n### ❌ Unnötige 3D-Diagramme\nNicht jede Datenvisualisierung benötigt eine 3D-Darstellung.\n\n::: {#45173f4b .cell execution_count=6}\n``` {.python .cell-code}\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nX, Y = np.meshgrid(np.linspace(-5, 5, 10), np.linspace(-5, 5, 10))\nZ = np.sin(np.sqrt(X**2 + Y**2))\nax.plot_surface(X, Y, Z, cmap='viridis')\nax.set_title('❌ Unnötige 3D-Darstellung')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](scientific_plotting_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n## Fazit\nDurch die Anwendung dieser Best Practices und das Vermeiden häufiger Fehler können wissenschaftliche Diagramme klarer und informativer gestaltet werden. Im nächsten Kapitel werden wir interaktive Visualisierungen mit Matplotlib betrachten.\n\n",
    "supporting": [
      "scientific_plotting_files"
    ],
    "filters": [],
    "includes": {}
  }
}